package com.backbase.accesscontrol.util.errorcodes;

import lombok.AllArgsConstructor;
import lombok.Getter;

@AllArgsConstructor
@Getter
public enum QueryErrorCodes implements ErrorCode {

    ERR_ACQ_001("Data group does not exist.",
        "dataAccessGroup.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_002("User does not exist.", "user.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_003("Function group does not exist.",
        "functionAccessGroup.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_005("Legal Entity does not exist", "legalEntities.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_006("Service agreement does not exist",
        "serviceAgreements.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_008("Unexpected number of Legal Entity document",
        "legalEntities.get.error.message.E_NOT_EXPECTED"),
    ERR_ACQ_009("Legal Entity parents does not exist",
        "legalEntities.parents.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_010("Invalid data group type name", "dataAccessGroup.get.error.message.E_INVALID_TYPE"),
    ERR_ACQ_011("Function Group can not be created/updated - invalid or not applicable Privilege",
        "permission.get.error.E_INVALID_OR_NOT_APPLICABLE_PRIVILEGE"),
    ERR_ACQ_012("Invalid function group ids",
        "functionGroup.get.error.message.E_INVALID_FUNCTION_GROUP_IDS"),
    ERR_ACQ_013("Invalid function group.", "functionGroup.put.error.E_INVALID_TYPE"),
    ERR_ACQ_014("Provider does not exist.",
        "serviceAgreements.get.error.message.E_PROVIDER_NOT_EXISTS"),
    ERR_ACQ_015("User Access does not exist.", "useraccess.get.error.message.E_NOT_EXISTS"),
    ERR_ACQ_016("Consumer does not exist.",
        "serviceAgreements.get.error.message.E_CONSUMER_NOT_EXISTS"),
    ERR_ACQ_017("User has no privilege to access function",
        "useraccess.get.error.message.E_USER_NO_PRIVILEGE"),
    ERR_ACQ_020("Invalid function group type", "functionGroup.error.message.E_INVALID_TYPE"),
    ERR_ACQ_021("Invalid legal entity type name",
        "legalEntities.get.error.message.E_INVALID_TYPE"),
    ERR_ACQ_022("Invalid service agreement status",
        "serviceAgreements.save.error.message.E_INVALID_STATUS"),
    ERR_ACQ_023("Function Group with given name already exists",
        "functionGroup.save.error.message.E_ALREADY_EXISTS"),
    ERR_ACQ_024("Function Group can not be created/updated - Invalid Business Function",
        "functionGroup.create.update.error.message.E_FUNCTION_NOT_EXISTS"),
    ERR_ACQ_025("Function Group can not be updated - Invalid request body values",
        "functionGroup.update.error.message.E_INVALID_UPDATE_VALUES"),
    ERR_ACQ_026("Function Group can not be assigned/revoked to/from user. Invalid Service Agreement",
        "useraccess.assign.revoke.functiongroup.error.message.E_NOT_VALID"),
    ERR_ACQ_027("Function Group can not be assigned/revoked to/from user. "
        + "User is not exposed on Service Agreement",
        "useraccess.assign.revoke.functiongroup.error.message.E_USER_NOT_EXPOSED"),
    ERR_ACQ_028("The given Function Access Group is not assigned to a User and can not be removed",
        "functionAccessGroup.assign.error.message.E_NOT_ASSIGNED"),
    ERR_ACQ_029("The given Function Access Group is already assigned to a User",
        "functionAccessGroup.assign.error.message.E_ASSIGNED"),
    ERR_ACQ_030("Data Group can not be assigned/revoked to/from user. Invalid Service Agreement",
        "useraccess.assign.revoke.datagroup.error.message.E_NOT_VALID"),
    ERR_ACQ_031("Data Group can not be assigned/revoked to/from user. "
        + "User is not exposed on Service Agreement",
        "useraccess.assign.revoke.datagroup.error.message.E_USER_NOT_EXPOSED"),
    ERR_ACQ_032("The given Data Access "
        + "Group is not assigned to the User/Function Access Group and can not be removed",
        "dataAccessGroup.assign.error.message.E_NOT_ASSIGNED"),
    ERR_ACQ_033("The given Data Access Group is already assigned to the User/Function Access Group",
        "dataAccessGroup.assign.error.message.E_ASSIGNED"),
    ERR_ACQ_034("Data Access Groups must be valid.",
        "dataGroup.assign.revoke.error.message.E_NOT_VALID_DATA_ACCESS_GROUPS"),
    ERR_ACQ_035("Parent external ID can not be updated",
        "legalEntities.parents.save.error.message.E_INVALID_PARENT_ID"),
    ERR_ACQ_036("External ID already exists",
        "serviceAgreements.save.error.message.E_EXTERNAL_ID_ALREADY_EXISTS"),
    ERR_ACQ_037("You can not remove participant from Service agreement",
        "serviceAgreements.save.error.message.E_REMOVING_PARTICIPANT"),
    ERR_ACQ_038("You can not change share users and accounts of participant in service agreement",
        "serviceAgreements.save.error.message.E_CHANGING_PARTICIPANT"),
    ERR_ACQ_039("You can not add participants that are not under the creator legal entity hierarchy ",
        "serviceAgreements.save.error.message.E_INVALID_PARTICIPANT_HIERARCHY"),
    ERR_ACQ_040("Operation is not allowed for master service agreement",
        "serviceAgreements.save.error.message.E_OPERATION_NOT_VALID"),
    ERR_ACQ_041("Name already exists", "serviceAgreements.save.error.message.E_NAME_ALREADY_EXISTS"),
    ERR_ACQ_042("Invalid input", "serviceAgreements.save.error.message.E_INVALID_INPUT"),
    ERR_ACQ_043("Invalid user data", "serviceAgreements.get.error.message.E_INVALID_USER_QUERY_DATA"),
    ERR_ACQ_044("Invalid input", "participants.put.error.message.E_INVALID_INPUT"),
    ERR_ACQ_045("Invalid page size, size must be lower than 1000",
        "list.page.error.message.E_INVALID_PAGE_SIZE"),
    ERR_ACQ_047("User has no access to service agreement",
        "user.access.service.agreement.error.message.E_USER_HAS_NO_ACCESS"),
    ERR_ACQ_048("Some of the requested approval ids, does not exists in access control",
        "user.access.service.approvals.error.message.INPUT_ID_DOES_NOT_EXISTS"),
    ERR_ACQ_049("Approval User Context does not exist",
        "user.access.service.approvals.error.message.APPROVAL_USER_CONTEXT_DOES_NOT_EXIST"),
    ERR_ACQ_050("Legal entity contains children, cannot be deleted",
        "legalEntities.delete.validation.HAS_CHILDREN"),
    ERR_ACQ_051("Legal entity is participant in CSA, cannot be deleted",
        "legalEntities.delete.validation.PARTICIPANT_IN_CSA"),
    ERR_ACQ_052("Legal entity is creator of CSA, cannot be deleted",
        "legalEntities.delete.validation.CREATOR_OF_CSA"),
    ERR_ACQ_053("There are users with assigned permissions in the Service Agreement, "
        + "so You cannot delete it.", "legalEntities.delete.validation.USERS_ASSIGNED_PERMISSIONS_IN_SA"),
    ERR_ACQ_054("Invalid Access Token",
        "token.delete.validation.INVALID_ACCESS_TOKEN"),
    ERR_ACQ_055("There are users with pending assign permissions in the Service Agreement, "
        + "so You cannot delete it.", "legalEntities.delete.validation.USERS_PENDING_PERMISSIONS_IN_SA"),
    ERR_ACQ_056("Service Agreement of root legal entity cannot be deleted",
        "serviceAgreements.delete.error.message.MSA_OF_ROOT_LE"),
    ERR_ACQ_057("There is more than one Service Agreement with the same name",
        "serviceAgreements.delete.error.message.MORE_THEN_ONE_SA_WITH_SAME_NAME"),
    ERR_ACQ_058("No service agreement or data item identifier is provided",
        "dataGroups.search.request.invalid"),
    ERR_ACQ_059("Invalid type", "dataGroup.save.error.message.E_INVALID_DATA_GROUP_TYPE"),
    ERR_ACQ_060("Approval does not exist", "dataGroup.get.approval.message.E_DOES_NOT_EXIST"),
    ERR_ACQ_061("Cannot assign pending delete data group.",
        "assign.permissions.pending.datagroup.delete"),
    ERR_ACQ_062("The APS doesn't exist.", "permissionSet.identifiers.NOT_EXISTS"),
    ERR_ACQ_063("Invalid id identifier of assignable permission set.",
        "permissionSet.identifier.INVALID_VALUE"),
    ERR_ACQ_064("Service Agreement Id or Legal Entity Id must be provided.",
        "serviceAgreement.id.NOT_PROVIDED"),
    ERR_ACQ_065("Data item type and id must be both provided or omitted.",
        "datagroup.parameters.invalid.TYPE_AND_ITEM_ID"),
    ERR_ACQ_066("Cannot assign pending delete function group.",
        "assign.permissions.pending.functiongroup.delete"),
    ERR_ACQ_067("Approval does not exist", "functionGroup.get.approval.message.E_DOES_NOT_EXIST"),
    ERR_ACQ_068(
        "Cannot assign permissions if assignable permission set of the Job Role Template is not of type regular user.",
        "permissionSet.type.INVALID_VALUE"),
    ERR_ACQ_069("Invalid Identifier. Either name or id identifier should be provided",
        "functionGroup.dataGroup.update.delete.error.message.E_INVALID_IDENTIFIER"),
    ERR_ACQ_070("The Reference Job Role cannot be used in this service agreement.",
        "referenceJobRoleTemplate.assign.error.message.INVALID_USAGE_IN_SA"),
    ERR_ACQ_071("Privileges cannot be provided without business function name or resource name.",
        "serviceAgreements.get.parameters.error.message.PRIVILEGES_WITHOUT_FUNCTION_OR_RESOURCE"),
    ERR_ACQ_072("Cancel approval request failed.",
        "referenceJobRoleTemplate.assign.error.message.CANCELED_APPROVAL_FAILED"),
    ERR_ACQ_073("Approval does not exist", "serviceAgreement.get.approval.message.E_DOES_NOT_EXIST"),
    ERR_ACQ_074("Item identifier is not unique", "dataGroup.item.identifier.E_NON_UNIQUE"),
    ERR_ACQ_076("Invalid function group id in the function group list ",
        "referenceJobRoleTemplate.assign.error.message.INVALID_ID"),
    ERR_ACQ_077("Service agreement identifier must be provided for this data item type",
        "datagroup.search.error.message.MISSING_SERVICE_AGREEMENT_IDENTIFIER"),
    ERR_ACQ_078("Modification of this function group is not allowed",
            "functionGroup.put.error.message.E_FG_MODIFICATION_NOT_ALLOWED"),
    ERR_ACQ_079("Service agreement identifier must be provided explicitly, either in user context or by a query parameter",
        "serviceAgreement.id.NOT_PROVIDED")
    ;


    private String errorMessage;
    private String errorCode;
}
